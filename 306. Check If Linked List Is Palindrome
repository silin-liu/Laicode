public class Solution {
  public boolean isPalindrome(ListNode head) {
    // Write your solution here
    if(head == null || head.next == null){
      return true;
    }
    ListNode middle = findMiddle( head);
    ListNode reversed = reverse(middle.next);
    // 这里的while要用后半段，如果list中的元素是奇数个，后半段就比前半段少一个middle，如果用
    // 前半段，后半段的pointer会发生non pointer的错误
    while(reversed != null ){
      if( head.value != reversed.value){
        return false;
      }
      head = head.next;
      reversed = reversed.next;
    }
    return true;
  }
  private ListNode findMiddle( ListNode head){
    ListNode slow = head;
    ListNode fast = head;
    while(fast.next != null && fast.next.next != null){
      slow = slow.next;
      fast = fast.next.next;
    }
    return slow;
  }
  private ListNode reverse(ListNode head){
    ListNode prev = null;
    while(head != null ){
      ListNode next = head.next;
      head.next = prev;
      prev = head;
      head = next;
    }
    return prev;
  }
}
//TC:O(N) SC:O(1)
