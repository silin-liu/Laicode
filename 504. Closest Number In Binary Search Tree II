/**
 * public class TreeNode {
 *   public int key;
 *   public TreeNode left;
 *   public TreeNode right;
 *   public TreeNode(int key) {
 *     this.key = key;
 *   }
 * }
 */

public class Solution {
  public int[] closestKValues(TreeNode root, double target, int k) {
    // Write your solution here
    LinkedList<Integer> queue = new LinkedList<>();
    inorder(root,target,k,queue);
    int[] res = new int[queue.size()];
    int i = 0;
    for(Integer num : queue){
      res[i++] = num;
    }
    return res;
  }
  private void inorder(TreeNode root, double target, int k, Queue<Integer> res){
    if(root == null){
      return;
    }
    inorder(root.left,target,k,res);
    if(res.size() < k  ){
      res.offer(root.key);
    }else{
      if(Math.abs(root.key - target) < Math.abs(res.peek() - target)){
        res.poll();
        res.offer(root.key);
      }else{
        return;// early return,如果当前节点都不满足，就不用继续往后走了
      }
    }
    inorder(root.right,target,k,res);
  }
}
//TC:O(N), SC:O(max(k,H))
