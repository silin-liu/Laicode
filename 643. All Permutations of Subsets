import java.util.Arrays;
public class Solution {
  public List<String> allPermutationsOfSubsets(String set) {
    // Write your solution here
    List<String> result = new ArrayList<>();
    if(set == null){
      return result;
    }
    char[] array = set.toCharArray();
    helper(result, array, 0);
    return result;
  }
  private void helper(List<String> result, char[] array, int index ){
    if(index == array.length){
      result.add(new String(array,0,index));
      return;
    }
    result.add(new String(array,0,index));
    for(int i = index; i < array.length; i++){
      swap(array, index, i);
      helper(result, array, index+1 );
      swap(array, index, i);
    }

  }
  private char[] swap(char[] array, int start, int end){
    char temp = array[start];
    array[start] = array[end];
    array[end] = temp;
    return array;
  }
}
// T O(n!)
// S o(n)
