public class Solution {
  public TreeNode deleteTree(TreeNode root, int key) {
    // Write your solution here
    if(root == null){
      return null;
    }
    if(root.key > key){
      root.left = deleteTree(root.left, key);
      return root; // 从父节点的视角，删掉子节点，从过递归到该删除到的子节点，就无法做出删除的操作
    }else if(root.key < key){
      root.right = deleteTree(root.right, key);
      return root;
    }
    // guarantee root!= null && root.key == key 
    if(root.left == null ){
      return root.right;
    }if(root.right == null){
      return root.left;
    }
    // gurantee root.right != null && roor.left != null
    if(root.right.left == null){
      root.right.left = root.left;
      return root.right;
    }

    TreeNode smallest = deleteSmallest(root.right);
    smallest.right = root.right; // 接管被删除节点的孩子
    smallest.left = root.left;
    return smallest;
    
  }

  private TreeNode deleteSmallest(TreeNode cur){
    TreeNode prev = cur;
    cur = cur.left;
    while(cur.left != null){
      prev = cur;
      cur = cur.left;
    }
    prev.left = cur.right;
    return cur;
    
  }
  
}
// T balanced O(logn) worst O(n)
// S O(height)
