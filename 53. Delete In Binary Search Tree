public class Solution {
  public TreeNode deleteTree(TreeNode root, int key) {
    // Write your solution here
    if(root == null){
      return null;
    }
    if(root.val > target){//往左走
      root.left = deleteTree(root.left,target);
      return root;
    }else if(root.val < target){// 往右走
      root.right = deleteTree(root.right, target);
      return root;
    }// guarantee root != null && root.val == target


    // 此时root就是要删掉的节点
    if(root.left == null){// 没有左孩子&叶子节点
      return root.right;
    }else if(root.right == null){//只有左孩子
      return root.left;
    }
    //guarantee have both child


    if(root.right.left == null){//右节点没有左孩子
      root.right.left = root.left
      return root.right;
    }
    
    //最general的情况
    //删掉节点
    TreeNode smallest = deleteSmallest(root.right);
    //把smalest 提上去
    smallest.left = root.left;
    smallest.right = root.right
    return smallest;

  }
  private TreeNode deleteSmallest(TreeNode cur){
    TreeNode prev = cur;
    cur = cur.left;
    //找到最左的节点
    while(cur.left != null){
      prev = cur;
      cur = cur.left;
    }
    //相当于skip掉了cur，把cur抽出来去顶替删掉节点的位置
    prev.left = cur.right;
    return cur;
  }

  
}
// T balanced O(logn) worst O(n)
// S O(height)
