public class Solution {
  public int[] kClosest(int[] array, int target, int k) {
    // Write your solution here
  
      if (array == null || array.length == 0) {
      return array;
    }
    if (k == 0) {
      return new int[0];
    }
    int left = findSmallerEqual(array,target);
    int right = left + 1;
    int[] result = new int[k];
    for (int i = 0; i < k; i++) {
      if (right >= array.length || left >= 0 && target - array[left] <= array[right] - target ) {
            result[i] = array[left--];
        } else {
            result[i] = array[right++];
        }
    }
    return result;
  }


  private int findSmallerEqual(int[] array, int target) {
    int left = 0;
    int right = array.length - 1;
    while (left < right - 1) {
      int mid = left + (right - left) / 2;
      if (array[mid] == target){
          return mid;
      } else if (array[mid] < target){
          left = mid;
      } else {
          right = mid;
      }
    }
    if (Math.abs(array[left] - target) <= Math.abs(array[right] - target)){
        return left;
    } else {
        return right;
    }
  }
}
//TC:O(log(n)+k) SC:O(1)
