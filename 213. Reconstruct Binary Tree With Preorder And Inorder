public class Solution {
  public TreeNode reconstruct(int[] inOrder, int[] preOrder) {
    // Write your solution here
    //solution: using recursion, given inOrder and preOrder  tree
    //从root开始一个一个往下接
    // 用preorder 找到root的value，preleft在的位置就是root
    // 然后通过这个value去inorder里，找到root的index，确定左右子树的范围

    Map<Integer,Integer> valueToIndex = new HashMap<>();
    for(int i = 0; i < inOrder.length; i++){
      valueToIndex.put(inOrder[i],i);
    }
    return helper(inOrder, 0, inOrder.length-1, preOrder,0,preOrder.length-1, valueToIndex);
  }
  private TreeNode helper(int[] inOrder, int inLeft, int inRight,
  int[] preOrder, int preLeft,int preRight, Map<Integer, Integer> valueToIndex){
    //当preleft = preRight 证明已经遍历到leaf，没有孩子了
    if(preLeft > preRight){
      return null;
    }
    // step1; find root，通过preOrder找到
    TreeNode root = new TreeNode(preOrder[preLeft]);
    // key point: we sould know the left subtree or right sub tree'size
    int rootIndex = valueToIndex.get(root.key);// 针对inOrder操作
    // step2: 对左右区间进行划分，针对inOrder操作
    int leftSubTreeSize = rootIndex - inLeft;

    root.left = helper(inOrder,inLeft,inLeft+leftSubTreeSize-1, 
              preOrder, preLeft+1, preLeft + leftSubTreeSize,
              valueToIndex);
    root.right = helper(inOrder,rootIndex+1,inRight,
               preOrder,preLeft+leftSubTreeSize+1,preRight,
               valueToIndex);
    return root;

  }
}
//T O(n)
//S O(Height + O(n)for valueToIndex)
