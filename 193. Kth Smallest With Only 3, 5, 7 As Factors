public class Solution {
  public long kth(int k) {
    // Write your solution here
    PriorityQueue<Long> minHeap = new PriorityQueue<>();
    Set<Long> visited = new HashSet<>();

    minHeap.offer(3*5*7L);
    visited.add(3*5*7L);
    while(k>1){
      long cur = minHeap.poll();
      --k;
      if(visited.add(3*cur)){
        minHeap.offer(3*cur);
      }
      if(visited.add(5*cur)){
        minHeap.offer(5*cur);
      }
      if(visited.add(7*cur)){
        minHeap.offer(7*cur);
      }
    }
    return minHeap.peek();
  }
}
//TC: O(klogk); SC: O(k)
