public class Solution {
  private static final char[] ps = new char[]{'(',')','<','>','{','}'};
  public List<String> validParentheses(int l, int m, int n) {
    // Write your solution here
    Deque<Character> stack = new ArrayDeque<>();
    StringBuilder sb = new StringBuilder();
    int targetLen = 2*m + 2*n + 2*l;
    List<String> result = new ArrayList<>();
    int[] remain = new int[]{l,l,m,m,n,n};
    helper(result, sb, stack, remain, targetLen);
    return result;

  }
  private void helper(List<String> result, StringBuilder sb, Deque<Character> stack, int[] remain, int targetLen ){
    if(sb.length() == targetLen){
      result.add(sb.toString());
      return;
    }
    //每一层的分支表示，选哪个括号，这里for的界限表示branch的数量
    for(int i = 0; i < remain.length; i++){
      if(i%2 == 0){
        if(remain[i] > 0 ){
          //chi
          sb.append(sb[i]);
          stack.offerFirst(ps[i]);
          remain[i]--;
          helper(result, sb, stack, remain, targetLen);
          //tu
          sb.deleteCharAt(sb.length()-1);
          stack.pollFirst();
          remain[i]++;
        }
      }
      else {
        //只要stack里有当前右括号对应的左括号，当前右括号就一点有剩余的
        if(!stack.isEmpty() && stack.peekFirst() == ps[i-1]){
          sb.append(ps[i]);
          stack.pollFirst();
          remain[i]--;
          helper(result, sb, stack, remain, targetLen);
          sb.deleteCharAt(sb.length()-1);
          stack.offerFirst(ps[i-1]);
          remain[i]++;
        }
      }
    }
  }
} 

//T O((2m+2n+2l)^(2k)) k是括号的种类
//S O(2m+2n+2l)
