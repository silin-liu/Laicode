public class Solution {
  public ListNode mergeSort(ListNode head) {
    // Write your solution here
    if(head == null || head.next == null){
      return head;
    }
    ListNode middle = findMiddle(head);
    ListNode middleNext = middle.next;
    middle.next = null;
    ListNode left = mergeSort(head);
    ListNode right = mergeSort(middleNext);
    
    return merge(left,right);
  }
  private ListNode findMiddle(ListNode head){
    ListNode fast = head;
    ListNode slow = head;
    while(fast.next != null && fast.next.next != null){
      fast = fast.next.next;
      slow = slow.next;
    }
    return slow;
  }
  private ListNode merge(ListNode one, ListNode two){
    ListNode dummy  = new ListNode(0);
    ListNode cur = dummy;
    while(one != null && two != null){
      if(one.value <= two.value){
        cur.next = one;
        one = one.next;
      }else{
        cur.next = two;
        two = two.next;
      }
      cur = cur.next;
    }
    if(one != null){
      cur.next = one;
    }
    if(two != null){
      cur.next= two;
    }
    return dummy.next;
  }
}
//TC:O(NLogN) SC:O(LogN)
